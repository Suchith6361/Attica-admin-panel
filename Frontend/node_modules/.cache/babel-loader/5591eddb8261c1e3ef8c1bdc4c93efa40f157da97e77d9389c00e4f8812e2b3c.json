{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { useParams } from \"react-router-dom\";\n\n// const CallLogDetails = () => {\n//   const { employeeId } = useParams();\n//   const [callLogs, setCallLogs] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [filteredCallLogs, setFilteredCallLogs] = useState([]);\n//   const [inputEmployeeId, setInputEmployeeId] = useState(\"\");\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\n\n//   // Fetch call logs from backend API\n//   const fetchCallLogs = async (id) => {\n//     try {\n//       const response = await axios.get(`http://localhost:3005/employees/${id}/call-logs`);\n//       setCallLogs(response.data);\n//       setFilteredCallLogs(response.data);\n//       setErrorMessage(\"\"); // Clear error message if successful\n//     } catch (error) {\n//       console.error(\"Error fetching call logs:\", error);\n//       setErrorMessage(\"Error fetching call logs. Please try again.\");\n//     }\n//   };\n\n// // Handle delete a single call log with confirmation\n// const handleDelete = async (callLogId) => {\n//   console.log(\"Attempting to delete call log with ID:\", callLogId); // Add this to check if correct log ID is passed\n//   if (window.confirm(\"Do you really want to delete this call log?\")) {\n//     try {\n//       const response = await axios.delete(`http://localhost:3005/Delete-call-log/${employeeId}/${callLogId}`);\n//       console.log(\"Delete response:\", response); // Log the response from the backend\n//       setCallLogs((prevLogs) => prevLogs.filter((log) => log._id !== callLogId));\n//       setFilteredCallLogs((prevFiltered) => prevFiltered.filter((log) => log._id !== callLogId));\n//     } catch (error) {\n//       console.error(\"Error deleting call log:\", error);\n//     }\n//   }\n// };\n\n//   // Handle delete all call logs with confirmation\n//   const handleDeleteAllCallLogs = async () => {\n//     if (window.confirm(\"Do you really want to delete all call logs? This action cannot be undone.\")) {\n//       try {\n//         await axios.delete(`http://localhost:3005/Delete-all-call-logs/${employeeId}`);\n//         setCallLogs([]); // Empty the call logs state\n//         setFilteredCallLogs([]); // Empty the filtered call logs state\n//         alert(\"All call logs deleted successfully.\");\n//       } catch (error) {\n//         console.error(\"Error deleting all call logs:\", error);\n//         alert(\"Error deleting all call logs. Please try again.\");\n//       }\n//     }\n//   };\n\n//   // Handle search input change\n//   const handleSearchChange = (event) => {\n//     setSearchTerm(event.target.value);\n//   };\n\n//   // Handle employee ID input change\n//   const handleEmployeeIdChange = (event) => {\n//     setInputEmployeeId(event.target.value);\n//     setErrorMessage(\"\"); // Clear error message on input change\n//   };\n\n//   // Handle form submission to fetch call logs for entered Employee ID\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (inputEmployeeId.trim() === \"\") {\n//       setErrorMessage(\"Please enter a valid Employee ID.\");\n//       return;\n//     }\n//     fetchCallLogs(inputEmployeeId);\n//     setInputEmployeeId(\"\"); // Clear input after submission\n//   };\n\n//   // Sort call logs by key\n//   const sortCallLogs = (key) => {\n//     let direction = \"asc\";\n//     if (sortConfig.key === key && sortConfig.direction === \"asc\") {\n//       direction = \"desc\";\n//     }\n//     setSortConfig({ key, direction });\n\n//     const sortedLogs = [...filteredCallLogs].sort((a, b) => {\n//       if (a[key] < b[key]) {\n//         return direction === \"asc\" ? -1 : 1;\n//       }\n//       if (a[key] > b[key]) {\n//         return direction === \"asc\" ? 1 : -1;\n//       }\n//       return 0;\n//     });\n//     setFilteredCallLogs(sortedLogs);\n//   };\n\n//   // Filter call logs based on search term\n//   useEffect(() => {\n//     const filtered = callLogs.filter((log) => {\n//       const name = log.name || \"\";\n//       const phoneNumber = log.phoneNumber || \"\";\n//       const type = log.type || \"\";\n//       const date = log.dateTime ? new Date(log.dateTime).toLocaleDateString() : \"\";\n\n//       return (\n//         name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         phoneNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         type.toLowerCase().includes(searchTerm.toLowerCase()) ||\n//         date.toLowerCase().includes(searchTerm.toLowerCase())\n//       );\n//     });\n//     setFilteredCallLogs(filtered);\n//   }, [searchTerm, callLogs]);\n\n//   return (\n//     <div className=\"p-4 absolute top-20 right-0 left-[275px]\">\n//       <span className=\"text-4xl font-bold\">Call Logs {employeeId}</span>\n//       <form onSubmit={handleSubmit} className=\"mb-4 mt-6\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Employee ID\"\n//           value={inputEmployeeId}\n//           onChange={handleEmployeeIdChange}\n//           className=\"border p-2 rounded mr-2 border border-purple-500 focus:border-purple-700 focus:ring-2 focus:ring-purple-500\"\n//         />\n//         <button\n//           type=\"submit\"\n//           className=\"bg-gradient-to-r from-blue-500 to-blue-700 hover:shadow-lg text-white px-6 py-2 rounded-lg\"\n//         >\n//           Fetch Call Logs\n//         </button>\n//       </form>\n//       {errorMessage && <p className=\"text-red-500\">{errorMessage}</p>}\n\n//       {callLogs.length > 0 && (\n//         <div>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search call logs...\"\n//             value={searchTerm}\n//             onChange={handleSearchChange}\n//             className=\"border p-2 rounded mb-4 border border-purple-500 focus:border-purple-700 focus:ring-2 focus:ring-purple-500 w-1/3\"\n//           />\n//           <button\n//             onClick={handleDeleteAllCallLogs}\n//             className=\"bg-gradient-to-r from-red-500 to-purple-700 hover:shadow-lg text-white px-4 py-2 rounded-lg ml-4\"\n//           >\n//             Delete All Call Logs\n//           </button>\n//         </div>\n//       )}\n\n//       <h2 className=\"text-xl font-bold mb-4\">Call Logs for Employee ID: {employeeId}</h2>\n//       {filteredCallLogs.length > 0 ? (\n//         <table className=\"min-w-full bg-white border border-gray-300 border-collapse shadow-lg rounded-lg overflow-hidden\">\n//           <thead className=\"bg-gradient-to-r from-purple-600 to-purple-400 text-white\">\n//             <tr>\n//             <th className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white\">Sl. No</th> {/* Serial number header */}\n//               <th\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\n//                 onClick={() => sortCallLogs(\"name\")}\n//               >\n//                 Name\n//               </th>\n//               <th\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\n//                 onClick={() => sortCallLogs(\"phoneNumber\")}\n//               >\n//                 Phone Number\n//               </th>\n//               <th\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\n//                 onClick={() => sortCallLogs(\"type\")}\n//               >\n//                 Type\n//               </th>\n//               <th\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\n//                 onClick={() => sortCallLogs(\"duration\")}\n//               >\n//                 Duration (minutes)\n//               </th>\n//               <th\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\n//                 onClick={() => sortCallLogs(\"dateTime\")}\n//               >\n//                 Date\n//               </th>\n//               <th className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white\">Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {filteredCallLogs.map((log,index) => (\n//               <tr key={log._id} className=\"hover:bg-gray-100 transition-colors duration-200\">\n//                  <td className=\"border border-gray-300 px-6 py-4\">{index + 1}</td> {/* Serial number */}\n//                 <td className=\"border border-gray-300 px-6 py-4\">{log.name}</td>\n//                 <td className=\"border border-gray-300 px-6 py-4\">{log.phoneNumber}</td>\n//                 <td className=\"border border-gray-300 px-6 py-4\">{log.type}</td>\n//                 <td className=\"border border-gray-300 px-6 py-4\">{(log.duration / 60).toFixed(2)} mins</td>\n//                 <td className=\"border border-gray-300 px-6 py-4\">{new Date(log.dateTime).toLocaleString()}</td>\n//                 <td className=\"border border-gray-300 px-6 py-4\">\n//                   <button\n//                     onClick={() => handleDelete(log._id)}\n//                     className=\"bg-gradient-to-r from-red-500 to-purple-700 hover:shadow-lg text-white px-4 py-2 rounded-lg\"\n//                   >\n//                     Delete\n//                   </button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       ) : (\n//         <p>No call logs found for this employee.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CallLogDetails","map":{"version":3,"names":[],"sources":["C:/Users/SUCHITH/OneDrive/Desktop/admin_panel new/admin_panel/Frontend/src/components/CallLogDetails.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// const CallLogDetails = () => {\r\n//   const { employeeId } = useParams();\r\n//   const [callLogs, setCallLogs] = useState([]);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [filteredCallLogs, setFilteredCallLogs] = useState([]);\r\n//   const [inputEmployeeId, setInputEmployeeId] = useState(\"\");\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [sortConfig, setSortConfig] = useState({ key: \"\", direction: \"asc\" });\r\n\r\n//   // Fetch call logs from backend API\r\n//   const fetchCallLogs = async (id) => {\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:3005/employees/${id}/call-logs`);\r\n//       setCallLogs(response.data);\r\n//       setFilteredCallLogs(response.data);\r\n//       setErrorMessage(\"\"); // Clear error message if successful\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching call logs:\", error);\r\n//       setErrorMessage(\"Error fetching call logs. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n// // Handle delete a single call log with confirmation\r\n// const handleDelete = async (callLogId) => {\r\n//   console.log(\"Attempting to delete call log with ID:\", callLogId); // Add this to check if correct log ID is passed\r\n//   if (window.confirm(\"Do you really want to delete this call log?\")) {\r\n//     try {\r\n//       const response = await axios.delete(`http://localhost:3005/Delete-call-log/${employeeId}/${callLogId}`);\r\n//       console.log(\"Delete response:\", response); // Log the response from the backend\r\n//       setCallLogs((prevLogs) => prevLogs.filter((log) => log._id !== callLogId));\r\n//       setFilteredCallLogs((prevFiltered) => prevFiltered.filter((log) => log._id !== callLogId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting call log:\", error);\r\n//     }\r\n//   }\r\n// };\r\n\r\n\r\n//   // Handle delete all call logs with confirmation\r\n//   const handleDeleteAllCallLogs = async () => {\r\n//     if (window.confirm(\"Do you really want to delete all call logs? This action cannot be undone.\")) {\r\n//       try {\r\n//         await axios.delete(`http://localhost:3005/Delete-all-call-logs/${employeeId}`);\r\n//         setCallLogs([]); // Empty the call logs state\r\n//         setFilteredCallLogs([]); // Empty the filtered call logs state\r\n//         alert(\"All call logs deleted successfully.\");\r\n//       } catch (error) {\r\n//         console.error(\"Error deleting all call logs:\", error);\r\n//         alert(\"Error deleting all call logs. Please try again.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Handle search input change\r\n//   const handleSearchChange = (event) => {\r\n//     setSearchTerm(event.target.value);\r\n//   };\r\n\r\n//   // Handle employee ID input change\r\n//   const handleEmployeeIdChange = (event) => {\r\n//     setInputEmployeeId(event.target.value);\r\n//     setErrorMessage(\"\"); // Clear error message on input change\r\n//   };\r\n\r\n//   // Handle form submission to fetch call logs for entered Employee ID\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     if (inputEmployeeId.trim() === \"\") {\r\n//       setErrorMessage(\"Please enter a valid Employee ID.\");\r\n//       return;\r\n//     }\r\n//     fetchCallLogs(inputEmployeeId);\r\n//     setInputEmployeeId(\"\"); // Clear input after submission\r\n//   };\r\n\r\n//   // Sort call logs by key\r\n//   const sortCallLogs = (key) => {\r\n//     let direction = \"asc\";\r\n//     if (sortConfig.key === key && sortConfig.direction === \"asc\") {\r\n//       direction = \"desc\";\r\n//     }\r\n//     setSortConfig({ key, direction });\r\n\r\n//     const sortedLogs = [...filteredCallLogs].sort((a, b) => {\r\n//       if (a[key] < b[key]) {\r\n//         return direction === \"asc\" ? -1 : 1;\r\n//       }\r\n//       if (a[key] > b[key]) {\r\n//         return direction === \"asc\" ? 1 : -1;\r\n//       }\r\n//       return 0;\r\n//     });\r\n//     setFilteredCallLogs(sortedLogs);\r\n//   };\r\n\r\n//   // Filter call logs based on search term\r\n//   useEffect(() => {\r\n//     const filtered = callLogs.filter((log) => {\r\n//       const name = log.name || \"\";\r\n//       const phoneNumber = log.phoneNumber || \"\";\r\n//       const type = log.type || \"\";\r\n//       const date = log.dateTime ? new Date(log.dateTime).toLocaleDateString() : \"\";\r\n\r\n//       return (\r\n//         name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         phoneNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         type.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n//         date.toLowerCase().includes(searchTerm.toLowerCase())\r\n//       );\r\n//     });\r\n//     setFilteredCallLogs(filtered);\r\n//   }, [searchTerm, callLogs]);\r\n\r\n//   return (\r\n//     <div className=\"p-4 absolute top-20 right-0 left-[275px]\">\r\n//       <span className=\"text-4xl font-bold\">Call Logs {employeeId}</span>\r\n//       <form onSubmit={handleSubmit} className=\"mb-4 mt-6\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter Employee ID\"\r\n//           value={inputEmployeeId}\r\n//           onChange={handleEmployeeIdChange}\r\n//           className=\"border p-2 rounded mr-2 border border-purple-500 focus:border-purple-700 focus:ring-2 focus:ring-purple-500\"\r\n//         />\r\n//         <button\r\n//           type=\"submit\"\r\n//           className=\"bg-gradient-to-r from-blue-500 to-blue-700 hover:shadow-lg text-white px-6 py-2 rounded-lg\"\r\n//         >\r\n//           Fetch Call Logs\r\n//         </button>\r\n//       </form>\r\n//       {errorMessage && <p className=\"text-red-500\">{errorMessage}</p>}\r\n      \r\n//       {callLogs.length > 0 && (\r\n//         <div>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Search call logs...\"\r\n//             value={searchTerm}\r\n//             onChange={handleSearchChange}\r\n//             className=\"border p-2 rounded mb-4 border border-purple-500 focus:border-purple-700 focus:ring-2 focus:ring-purple-500 w-1/3\"\r\n//           />\r\n//           <button\r\n//             onClick={handleDeleteAllCallLogs}\r\n//             className=\"bg-gradient-to-r from-red-500 to-purple-700 hover:shadow-lg text-white px-4 py-2 rounded-lg ml-4\"\r\n//           >\r\n//             Delete All Call Logs\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <h2 className=\"text-xl font-bold mb-4\">Call Logs for Employee ID: {employeeId}</h2>\r\n//       {filteredCallLogs.length > 0 ? (\r\n//         <table className=\"min-w-full bg-white border border-gray-300 border-collapse shadow-lg rounded-lg overflow-hidden\">\r\n//           <thead className=\"bg-gradient-to-r from-purple-600 to-purple-400 text-white\">\r\n//             <tr>\r\n//             <th className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white\">Sl. No</th> {/* Serial number header */}\r\n//               <th\r\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\r\n//                 onClick={() => sortCallLogs(\"name\")}\r\n//               >\r\n//                 Name\r\n//               </th>\r\n//               <th\r\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\r\n//                 onClick={() => sortCallLogs(\"phoneNumber\")}\r\n//               >\r\n//                 Phone Number\r\n//               </th>\r\n//               <th\r\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\r\n//                 onClick={() => sortCallLogs(\"type\")}\r\n//               >\r\n//                 Type\r\n//               </th>\r\n//               <th\r\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\r\n//                 onClick={() => sortCallLogs(\"duration\")}\r\n//               >\r\n//                 Duration (minutes)\r\n//               </th>\r\n//               <th\r\n//                 className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white cursor-pointer\"\r\n//                 onClick={() => sortCallLogs(\"dateTime\")}\r\n//               >\r\n//                 Date\r\n//               </th>\r\n//               <th className=\"border border-gray-300 px-6 py-3 text-left font-medium text-white\">Actions</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {filteredCallLogs.map((log,index) => (\r\n//               <tr key={log._id} className=\"hover:bg-gray-100 transition-colors duration-200\">\r\n//                  <td className=\"border border-gray-300 px-6 py-4\">{index + 1}</td> {/* Serial number */}\r\n//                 <td className=\"border border-gray-300 px-6 py-4\">{log.name}</td>\r\n//                 <td className=\"border border-gray-300 px-6 py-4\">{log.phoneNumber}</td>\r\n//                 <td className=\"border border-gray-300 px-6 py-4\">{log.type}</td>\r\n//                 <td className=\"border border-gray-300 px-6 py-4\">{(log.duration / 60).toFixed(2)} mins</td>\r\n//                 <td className=\"border border-gray-300 px-6 py-4\">{new Date(log.dateTime).toLocaleString()}</td>\r\n//                 <td className=\"border border-gray-300 px-6 py-4\">\r\n//                   <button\r\n//                     onClick={() => handleDelete(log._id)}\r\n//                     className=\"bg-gradient-to-r from-red-500 to-purple-700 hover:shadow-lg text-white px-4 py-2 rounded-lg\"\r\n//                   >\r\n//                     Delete\r\n//                   </button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       ) : (\r\n//         <p>No call logs found for this employee.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CallLogDetails"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}