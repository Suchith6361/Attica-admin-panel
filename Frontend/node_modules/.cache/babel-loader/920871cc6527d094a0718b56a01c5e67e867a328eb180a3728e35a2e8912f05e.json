{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { useParams, Link } from \"react-router-dom\";\n// import Calendar from 'react-calendar';\n// import 'react-calendar/dist/Calendar.css';\n\n// const AttendanceTable = () => {\n//   const [attendance, setAttendance] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const { employeeId } = useParams();\n//   const [date, setDate] = useState(new Date());\n\n//   useEffect(() => {\n//     const fetchEmployeeAttendance = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await axios.get(`http://localhost:3005/employees/${employeeId}/attendance-list`);\n//         setAttendance(response.data); // Store the array of attendance records\n//       } catch (err) {\n//         setError(\"Error fetching employee data. Please try again later.\");\n//         console.error(\"Error fetching employee data:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchEmployeeAttendance();\n//   }, [employeeId]);\n\n//   // Generate an array of days in the selected month\n//   const generateMonthDays = (year, month) => {\n//     const daysInMonth = new Date(year, month + 1, 0).getDate();\n//     const days = [];\n//     for (let day = 1; day <= daysInMonth; day++) {\n//       days.push(new Date(year, month, day));\n//     }\n//     return days;\n//   };\n\n//   // Create attendance records for the selected month\n//   const fullMonthAttendance = generateMonthDays(date.getFullYear(), date.getMonth()).map(day => {\n//     const record = attendance.find(att => new Date(att.time).toDateString() === day.toDateString()); // Match attendance record by date\n//     let status = null;\n\n//     // Determine status based on the retrieved record\n//     if (record) {\n//       if (record.AttendanceStatus.isPresent) {\n//         status = \"Present\";\n//       } else if (record.AttendanceStatus.isHalfDay) {\n//         status = \"Half Day\";\n//       } else if (record.AttendanceStatus.isLeave) {\n//         status = \"Leave\";\n//       } else {\n//         status = \"Absent\"; // Default to Absent if no conditions match\n//       }\n//     }\n\n//     return {\n//       date: day,\n//       status, // Include status in return object\n//     };\n//   });\n\n//   return (\n//     <div className=\"p-6 max-w-7xl mx-auto bg-gray-100 rounded-lg shadow-lg absolute top-20 right-10 left-[275px]\">\n//       <h2 className=\"text-4xl font-bold mb-6 text-center text-blue-600\">Employee Attendance</h2>\n\n//       <div className=\"mb-6\">\n//         <Calendar \n//           onChange={setDate} \n//           value={date} \n//           className=\"mx-auto\" \n//         />\n//         <p className=\"text-center text-gray-600 mt-2\">Selected Month: {date.toLocaleString('default', { month: 'long', year: 'numeric' })}</p>\n//       </div>\n\n//       {loading ? (\n//         <p className=\"text-center text-gray-500\">Loading attendance...</p>\n//       ) : error ? (\n//         <p className=\"text-center text-red-500\">{error}</p>\n//       ) : (\n//         <div className=\"mb-8\">\n//           <table className=\"min-w-full bg-white mt-4 border border-gray-300 rounded-lg shadow-md\">\n//             <thead className=\"bg-gray-200\">\n//               <tr>\n//                 <th className=\"border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-600\">Date</th>\n//                 <th className=\"border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-600\">Status</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {fullMonthAttendance.map(({ date, status }) => (\n//                 <tr key={date.toDateString()} className=\"hover:bg-gray-100 transition-colors duration-200\">\n//                   <td className=\"border border-gray-300 px-4 py-2\">\n//                     {date.toDateString()}\n//                   </td>\n//                   <td className=\"border border-gray-300 px-4 py-2\">\n//                     {status ? (\n//                       <span className={`inline-block px-3 py-1 rounded-full text-sm font-bold ${\n//                         status === \"Present\" ? \"bg-green-100 text-green-600\" :\n//                         status === \"Half Day\" ? \"bg-yellow-100 text-yellow-600\" :\n//                         status === \"Leave\" ? \"bg-blue-100 text-blue-600\" :\n//                         \"bg-red-100 text-red-600\"\n//                       }`}>\n//                         {status}\n//                       </span>\n//                     ) : (\n//                       <span className=\"text-gray-500\">No record</span>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AttendanceTable;","map":{"version":3,"names":[],"sources":["C:/Users/SUCHITH/OneDrive/Desktop/admin_panel new/admin_panel/Frontend/src/components/AttendanceTable.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useParams, Link } from \"react-router-dom\";\r\n// import Calendar from 'react-calendar';\r\n// import 'react-calendar/dist/Calendar.css';\r\n\r\n// const AttendanceTable = () => {\r\n//   const [attendance, setAttendance] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const { employeeId } = useParams();\r\n//   const [date, setDate] = useState(new Date());\r\n\r\n//   useEffect(() => {\r\n//     const fetchEmployeeAttendance = async () => {\r\n//       setLoading(true);\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:3005/employees/${employeeId}/attendance-list`);\r\n//         setAttendance(response.data); // Store the array of attendance records\r\n//       } catch (err) {\r\n//         setError(\"Error fetching employee data. Please try again later.\");\r\n//         console.error(\"Error fetching employee data:\", err);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchEmployeeAttendance();\r\n//   }, [employeeId]);\r\n\r\n//   // Generate an array of days in the selected month\r\n//   const generateMonthDays = (year, month) => {\r\n//     const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n//     const days = [];\r\n//     for (let day = 1; day <= daysInMonth; day++) {\r\n//       days.push(new Date(year, month, day));\r\n//     }\r\n//     return days;\r\n//   };\r\n\r\n//   // Create attendance records for the selected month\r\n//   const fullMonthAttendance = generateMonthDays(date.getFullYear(), date.getMonth()).map(day => {\r\n//     const record = attendance.find(att => new Date(att.time).toDateString() === day.toDateString()); // Match attendance record by date\r\n//     let status = null;\r\n\r\n//     // Determine status based on the retrieved record\r\n//     if (record) {\r\n//       if (record.AttendanceStatus.isPresent) {\r\n//         status = \"Present\";\r\n//       } else if (record.AttendanceStatus.isHalfDay) {\r\n//         status = \"Half Day\";\r\n//       } else if (record.AttendanceStatus.isLeave) {\r\n//         status = \"Leave\";\r\n//       } else {\r\n//         status = \"Absent\"; // Default to Absent if no conditions match\r\n//       }\r\n//     }\r\n\r\n//     return {\r\n//       date: day,\r\n//       status, // Include status in return object\r\n//     };\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"p-6 max-w-7xl mx-auto bg-gray-100 rounded-lg shadow-lg absolute top-20 right-10 left-[275px]\">\r\n//       <h2 className=\"text-4xl font-bold mb-6 text-center text-blue-600\">Employee Attendance</h2>\r\n      \r\n//       <div className=\"mb-6\">\r\n//         <Calendar \r\n//           onChange={setDate} \r\n//           value={date} \r\n//           className=\"mx-auto\" \r\n//         />\r\n//         <p className=\"text-center text-gray-600 mt-2\">Selected Month: {date.toLocaleString('default', { month: 'long', year: 'numeric' })}</p>\r\n//       </div>\r\n\r\n//       {loading ? (\r\n//         <p className=\"text-center text-gray-500\">Loading attendance...</p>\r\n//       ) : error ? (\r\n//         <p className=\"text-center text-red-500\">{error}</p>\r\n//       ) : (\r\n//         <div className=\"mb-8\">\r\n//           <table className=\"min-w-full bg-white mt-4 border border-gray-300 rounded-lg shadow-md\">\r\n//             <thead className=\"bg-gray-200\">\r\n//               <tr>\r\n//                 <th className=\"border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-600\">Date</th>\r\n//                 <th className=\"border border-gray-300 px-4 py-2 text-left text-sm font-medium text-gray-600\">Status</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {fullMonthAttendance.map(({ date, status }) => (\r\n//                 <tr key={date.toDateString()} className=\"hover:bg-gray-100 transition-colors duration-200\">\r\n//                   <td className=\"border border-gray-300 px-4 py-2\">\r\n//                     {date.toDateString()}\r\n//                   </td>\r\n//                   <td className=\"border border-gray-300 px-4 py-2\">\r\n//                     {status ? (\r\n//                       <span className={`inline-block px-3 py-1 rounded-full text-sm font-bold ${\r\n//                         status === \"Present\" ? \"bg-green-100 text-green-600\" :\r\n//                         status === \"Half Day\" ? \"bg-yellow-100 text-yellow-600\" :\r\n//                         status === \"Leave\" ? \"bg-blue-100 text-blue-600\" :\r\n//                         \"bg-red-100 text-red-600\"\r\n//                       }`}>\r\n//                         {status}\r\n//                       </span>\r\n//                     ) : (\r\n//                       <span className=\"text-gray-500\">No record</span>\r\n//                     )}\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AttendanceTable;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}